{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport axios from 'axios';\nimport { Library } from './lib/library';\nimport type { BrightskyHourly } from './lib/definition';\nimport { genericStateObjects, type BrightskyDailyData, type BrightskyWeather } from './lib/definition';\nimport * as suncalc from 'suncalc';\n\naxios.defaults.timeout = 15000; // Set a default timeout of 10 seconds for all axios requests\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Brightsky extends utils.Adapter {\n    library: Library;\n    unload: boolean = false;\n    posId: string = '';\n    weatherTimeout: (ioBroker.Timeout | null | undefined)[] = [];\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'brightsky',\n        });\n        this.on('ready', this.onReady.bind(this));\n        // this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.library = new Library(this, 'Brightsky');\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.setState('info.connection', false, true);\n        if (!this.config.createDaily) {\n            await this.delObjectAsync('daily', { recursive: true });\n        }\n        if (!this.config.createCurrently) {\n            await this.delObjectAsync('current', { recursive: true });\n        }\n        if (!this.config.createHourly) {\n            await this.delObjectAsync('hourly', { recursive: true });\n        }\n        if (!this.config.createCurrently && !this.config.createHourly && !this.config.createDaily) {\n            this.log.error(\n                'No data creation is enabled in the adapter configuration. Please enable at least one of the options: Currently, Hourly, or Daily.',\n            );\n            return;\n        }\n        if (this.config.wmo_station == undefined || typeof this.config.wmo_station !== 'string') {\n            this.log.warn(`Invalid WMO station ID. Using default value of \"\".`);\n            this.config.wmo_station = ''; // Default to 0 if invalid\n        }\n        if (this.config.dwd_station_id == undefined || typeof this.config.dwd_station_id !== 'string') {\n            this.log.warn(`Invalid DWD station ID. Using default value of \"\".`);\n            this.config.dwd_station_id = ''; // Default to 0 if invalid\n        }\n        if (this.config.wmo_station !== '' && this.config.dwd_station_id !== '') {\n            this.log.warn(\n                'Both WMO station ID and DWD station ID are set. Using DWD station ID for location identification.',\n            );\n            this.config.wmo_station = ''; // Clear WMO station ID if DWD station ID is set\n        }\n        this.posId = this.config.dwd_station_id\n            ? `dwd_station_id=${this.config.dwd_station_id}`\n            : this.config.wmo_station == ''\n              ? `lat=${this.config.position.split(',')[0]}&lon=${this.config.position.split(',')[1]}&`\n              : `wmo_station_id=${this.config.wmo_station}`;\n        if (\n            !this.config.position ||\n            typeof this.config.position !== 'string' ||\n            !this.config.position.split(',').every(coord => !isNaN(parseFloat(coord)))\n        ) {\n            this.log.error('Position is not set in the adapter configuration. Please set it in the adapter settings.');\n            return;\n        }\n        if (this.config.hours == undefined || this.config.hours < 0 || this.config.hours > 48) {\n            this.log.warn(`Invalid hours to display: ${this.config.hours}. Using default value of 24 hours.`);\n            this.config.hours = 24; // Default to 24 hours if invalid\n        }\n\n        if (this.config.pollInterval == undefined || this.config.pollInterval < 1) {\n            this.log.warn(`Invalid poll interval: ${this.config.pollInterval}. Using default value of 12 hour.`);\n            this.config.pollInterval = 12; // Default to 1 hour if invalid\n        }\n        if (\n            this.config.pollIntervalCurrently == undefined ||\n            this.config.pollIntervalCurrently < 10 ||\n            this.config.pollIntervalCurrently >= 2 ** 21 / 60000\n        ) {\n            this.log.warn(\n                `Invalid poll interval currently: ${this.config.pollIntervalCurrently}. Using default value of 30 minute.`,\n            );\n            this.config.pollIntervalCurrently = 30; // Default to 1 minute if invalid\n        }\n\n        if (this.config.maxDistance == undefined || this.config.maxDistance < 1000) {\n            this.log.warn(`Invalid max distance: ${this.config.maxDistance}. Using default value of 50000 meters.`);\n            this.config.maxDistance = 50000; // Default to 50 km if invalid\n        }\n        if (this.config.createCurrently) {\n            await this.delay(3000); // Wait for 1 second to ensure the adapter is ready\n            await this.weatherCurrentlyLoop();\n        }\n        if (this.config.createHourly) {\n            await this.delay(3000);\n            await this.weatherHourlyLoop();\n        }\n        if (this.config.createDaily) {\n            await this.delay(3000);\n            await this.weatherDailyLoop();\n        }\n        this.log.info(\n            `Adapter started with configuration: Position: ${this.config.position}, WMO Station ID: ${this.config.wmo_station}, DWD Station ID: ${this.config.dwd_station_id}, ${this.config.createCurrently ? `Currently data enabled. Poll interval: ${this.config.pollIntervalCurrently} minutes` : 'Currently data disabled'} - ${this.config.createHourly ? `Hourly data enabled. Poll interval: ${this.config.pollInterval} hours` : 'Hourly data disabled'} - ${this.config.createDaily ? 'Daily data enabled' : 'Daily data disabled'}. Max distance: ${this.config.maxDistance} meters.`,\n        );\n        this.log.info(\n            `Using ${this.config.dwd_station_id ? `WMO Station ID: ${this.config.dwd_station_id}` : `${this.config.wmo_station ? `WMO Station ID: ${this.config.wmo_station}` : `Position: ${this.config.position} with max distance: ${this.config.maxDistance} meters`}`}`,\n        );\n    }\n\n    async weatherDailyLoop(): Promise<void> {\n        if (this.weatherTimeout[2]) {\n            this.clearTimeout(this.weatherTimeout[2]);\n        }\n        await this.weatherDailyUpdate();\n        let loopTime = 100000;\n        if (new Date().getHours() >= 5 && new Date().getHours() < 18) {\n            loopTime = new Date().setHours(18, 0, 0, 0) + 30000 + Math.ceil(Math.random() * 5000);\n        } else if (new Date().getHours() >= 18) {\n            loopTime = new Date().setHours(0, 0, 0, 0) + 30000 + Math.ceil(Math.random() * 60000);\n        } else {\n            loopTime = new Date().setHours(5, 0, 0, 0) + 30000 + Math.ceil(Math.random() * 5000);\n        }\n        loopTime = loopTime - Date.now(); // Calculate the time until the next update\n        if (loopTime <= 0) {\n            loopTime = loopTime + 24 * 60 * 60 * 1000; // If the time is in the past, set it to the next day\n        }\n        this.weatherTimeout[2] = this.setTimeout(() => {\n            void this.weatherDailyLoop();\n        }, loopTime);\n    }\n\n    async weatherDailyUpdate(): Promise<void> {\n        const startTime = new Date(new Date().setHours(0, 0, 0, 0)).toISOString();\n        const endTime = new Date(\n            new Date(new Date().setHours(23, 59, 59, 999)).setDate(new Date().getDate() + 7),\n        ).toISOString();\n        try {\n            const result: { data: BrightskyHourly } = await axios.get(\n                `https://api.brightsky.dev/weather?${this.posId}&max_dist=${this.config.maxDistance}&date=${startTime}&last_date=${endTime}`,\n            );\n            this.log.debug(\n                `https://api.brightsky.dev/weather?lat=${this.config.position.split(',')[0]}&lon=${this.config.position.split(',')[1]}&max_dist=${this.config.maxDistance}&date=${startTime}&last_date=${endTime}`,\n            );\n            if (result.data) {\n                this.log.debug(`Daily weather data fetched successfully: ${JSON.stringify(result.data)}`);\n                if (result.data.weather && Array.isArray(result.data.weather)) {\n                    const weatherArr: Record<string, (string | number | null)[]>[] = [];\n                    const resultArr: Partial<BrightskyDailyData>[] = [];\n                    const currentDay = Math.floor(new Date().getTime() / (24 * 60 * 60 * 1000)); // Current day in milliseconds\n                    for (const item of result.data.weather as BrightskyWeather[]) {\n                        if (!item) {\n                            continue; // Skip if item is null or undefined\n                        }\n                        const dataDay = Math.floor(new Date(item.timestamp).getTime() / (24 * 60 * 60 * 1000));\n                        const day = dataDay - currentDay;\n                        if (weatherArr[day] === undefined) {\n                            weatherArr[day] = {};\n                        }\n                        for (const key of Object.keys(item)) {\n                            if (weatherArr[day][key] === undefined) {\n                                weatherArr[day][key] = [];\n                            }\n                            const k = key as keyof BrightskyWeather;\n                            weatherArr[day][key].push(item[k] ?? null);\n                        }\n                    }\n                    for (let i = 0; i < weatherArr.length; i++) {\n                        const dailyData: Partial<BrightskyDailyData> = {};\n                        this.log.debug(`Processing daily data for day ${i}: ${JSON.stringify(weatherArr[i])}`);\n                        for (const key of Object.keys(weatherArr[i])) {\n                            const k = key as keyof BrightskyWeather;\n                            switch (k) {\n                                case 'precipitation':\n                                case 'wind_gust_speed':\n                                case 'precipitation_probability':\n                                case 'precipitation_probability_6h':\n                                case 'wind_speed': {\n                                    const values = weatherArr[i][k] as (number | null)[];\n                                    if (values && values.length > 0) {\n                                        for (let j = 0; j < values.length; j++) {\n                                            if (values[j] === null) {\n                                                values[j] = 0; // Set null values to 0\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            switch (k) {\n                                case 'timestamp': {\n                                    dailyData.timestamp = weatherArr[i].timestamp[0] as string;\n                                    break;\n                                }\n                                case 'source_id': {\n                                    dailyData.source_id = weatherArr[i].source_id[0] as number;\n                                    break;\n                                }\n                                case 'precipitation':\n                                case 'wind_speed':\n                                case 'solar':\n                                case 'temperature': {\n                                    const values = weatherArr[i][k] as (number | null)[];\n                                    if (values && values.length > 0) {\n                                        const min = Math.min(...(values.filter(v => v !== null) as number[]));\n                                        const max = Math.max(...(values.filter(v => v !== null) as number[]));\n\n                                        if (k !== 'solar') {\n                                            dailyData[`${k}_min`] = min !== Infinity ? min : null;\n                                        } else {\n                                            if (\n                                                this.config.position.split(',').length === 2 &&\n                                                this.config.panels.length > 0\n                                            ) {\n                                                dailyData.solar_estimate = values.reduce((sum, value, index) => {\n                                                    if (typeof sum !== 'number') {\n                                                        sum = 0; // Initialize sum to 0 if it's not a number\n                                                    }\n                                                    if (value != null && typeof value === 'number') {\n                                                        const newValue = estimatePVEnergyForHour(\n                                                            value,\n                                                            new Date(weatherArr[i].timestamp[index] as string),\n                                                            {\n                                                                lat: parseFloat(this.config.position.split(',')[0]),\n                                                                lon: parseFloat(this.config.position.split(',')[1]),\n                                                            },\n                                                            this.config.panels,\n                                                        );\n\n                                                        return sum + newValue;\n                                                    }\n                                                    return sum;\n                                                });\n                                                dailyData.solar_estimate = dailyData.solar_estimate\n                                                    ? Math.round(dailyData.solar_estimate * 1000) / 1000\n                                                    : dailyData.solar_estimate;\n                                            }\n                                            if (new Date().getHours() === 5) {\n                                                dailyData.solar_forHomoran = values.reduce((sum, value) => {\n                                                    if (typeof sum !== 'number') {\n                                                        sum = 0; // Initialize sum to 0 if it's not a number\n                                                    }\n                                                    if (value != null && typeof value === 'number') {\n                                                        return sum + value;\n                                                    }\n                                                    return sum;\n                                                });\n                                                if (dailyData.solar_estimate != null) {\n                                                    dailyData.solar_estimateForHomoran = dailyData.solar_estimate;\n                                                }\n                                            }\n\n                                            dailyData[`${k}_max`] = null;\n                                        }\n                                        dailyData[`${k}_max`] = max !== -Infinity ? max : null;\n                                    } else {\n                                        if (k !== 'solar') {\n                                            dailyData[`${k}_min`] = null;\n                                        }\n                                    }\n                                }\n                                // eslint-disable-next-line no-fallthrough\n                                case 'sunshine': {\n                                    if (k === 'precipitation' || k === 'sunshine' || k === 'solar') {\n                                        const t = weatherArr[i][k].reduce((sum, value) => {\n                                            if (typeof sum !== 'number') {\n                                                sum = 0; // Initialize sum to 0 if it's not a number\n                                            }\n                                            if (value != null && typeof value === 'number') {\n                                                return sum + value;\n                                            }\n                                            return sum;\n                                        }, 0);\n                                        dailyData[k] = null;\n                                        if (t !== null && typeof t === 'number') {\n                                            dailyData[k] =\n                                                k !== 'solar' ? Math.round(t * 10) / 10 : Math.round(t * 1000) / 1000;\n                                        }\n                                        break;\n                                    }\n                                }\n                                // eslint-disable-next-line no-fallthrough\n                                case 'wind_direction':\n                                case 'cloud_cover':\n                                case 'dew_point':\n                                case 'relative_humidity':\n                                case 'visibility':\n                                case 'wind_gust_direction':\n                                case 'wind_gust_speed':\n                                case 'precipitation_probability':\n                                case 'precipitation_probability_6h': {\n                                    const values = weatherArr[i][k] as (number | null)[];\n                                    if (values && values.length > 0) {\n                                        if (values && values.length > 0) {\n                                            let median: number | null = null;\n                                            if (values.filter(v => v !== null).length > 0) {\n                                                const sortedValues = values\n                                                    .filter(v => v !== null)\n                                                    .sort((a, b) => a - b);\n                                                const mid = Math.floor(sortedValues.length / 2);\n                                                if (sortedValues.length % 2 === 0) {\n                                                    median = (sortedValues[mid - 1] + sortedValues[mid]) / 2;\n                                                } else {\n                                                    median = sortedValues[mid];\n                                                }\n                                            }\n                                            let avg = values.reduce((sum, value) => {\n                                                if (value != null) {\n                                                    return sum == null ? 0 + value : sum + value;\n                                                }\n                                                return sum;\n                                            }, 0);\n                                            if (avg != null) {\n                                                if (values.filter(v => v !== null).length > 12) {\n                                                    avg =\n                                                        Math.round((avg / values.filter(v => v !== null).length) * 10) /\n                                                        10;\n                                                } else {\n                                                    avg = null;\n                                                }\n                                            }\n                                            dailyData[`${k}_median`] = median;\n                                            dailyData[k] = avg;\n                                        } else {\n                                            dailyData[k] = null;\n                                            dailyData[`${k}_median`] = null;\n                                        }\n                                    }\n                                    break;\n                                }\n                                case 'icon':\n                                case 'condition': {\n                                    const tempArr: { value: string | number; count: number }[] = [];\n                                    for (const value of weatherArr[i][k]) {\n                                        if (value) {\n                                            const index = tempArr.findIndex(el => el.value === value);\n                                            if (index !== -1) {\n                                                tempArr[index].count++;\n                                            } else {\n                                                tempArr.push({ value, count: 1 });\n                                            }\n                                        }\n                                    }\n                                    tempArr.sort((a, b) => b.count - a.count);\n                                    if (tempArr.length > 0) {\n                                        if (k === 'icon') {\n                                            tempArr[0].value = (tempArr[0].value as string).replace('-night', '-day');\n                                        }\n                                        dailyData[k] = tempArr[0].value as string;\n                                    } else {\n                                        dailyData[k] = null;\n                                    }\n                                    dailyData.icon_special = this.pickDailyWeatherIcon({\n                                        condition: weatherArr[i].condition as (string | null | undefined)[],\n                                        wind_speed: weatherArr[i].wind_speed as (number | null | undefined)[],\n                                        precipitation: weatherArr[i].precipitation as (number | null | undefined)[],\n                                        cloud_cover: weatherArr[i].cloud_cover as (number | null | undefined)[],\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n\n                        /*const dailyData: Partial<BrightskyDailyData> = {\n                        ...weatherArr.d[i],\n                        precipitation_min: weatherArr.min[i].precipitation,\n                        precipitation_max: weatherArr.max[i].precipitation,\n                        wind_speed_min: weatherArr.min[i].wind_speed,\n                        wind_speed_max: weatherArr.max[i].wind_speed,\n                        temperature_min: weatherArr.min[i].temperature,\n                        temperature_max: weatherArr.max[i].temperature,\n                    };*/\n                        const times = suncalc.getTimes(\n                            new Date(dailyData.timestamp as string),\n                            parseFloat(this.config.position.split(',')[0]),\n                            parseFloat(this.config.position.split(',')[1]),\n                        );\n                        dailyData.sunset = times.sunset.getTime();\n                        dailyData.sunrise = times.sunrise.getTime();\n                        resultArr.push(dailyData);\n                    }\n\n                    await this.library.writeFromJson('daily.r', 'weather.daily', genericStateObjects, resultArr, true);\n\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching daily weather data: ${JSON.stringify(error)}`);\n        }\n    }\n\n    async weatherCurrentlyLoop(): Promise<void> {\n        if (this.weatherTimeout[0]) {\n            this.clearTimeout(this.weatherTimeout[0]);\n        }\n        await this.weatherCurrentlyUpdate();\n\n        this.weatherTimeout[0] = this.setTimeout(\n            () => {\n                void this.weatherCurrentlyLoop();\n            },\n            this.config.pollIntervalCurrently * 60000 + Math.ceil(Math.random() * 8000),\n        );\n    }\n\n    async weatherHourlyLoop(): Promise<void> {\n        if (this.weatherTimeout[1]) {\n            this.clearTimeout(this.weatherTimeout[1]);\n        }\n        await this.weatherHourlyUpdate();\n        const loopTime =\n            new Date().setHours(new Date().getHours() + this.config.pollInterval, 0, 0) +\n            3000 +\n            Math.ceil(Math.random() * 5000); // Add a random delay of up to 5 second\n        this.weatherTimeout[1] = this.setTimeout(() => {\n            void this.weatherHourlyLoop();\n        }, loopTime - Date.now());\n    }\n    async weatherHourlyUpdate(): Promise<void> {\n        const startTime = new Date(new Date().setMinutes(0, 0, 0)).toISOString();\n        const endTime = new Date(new Date().setHours(new Date().getHours() + this.config.hours, 0, 0, 0)).toISOString();\n        try {\n            const result = await axios.get(\n                `https://api.brightsky.dev/weather?${this.posId}&max_dist=${this.config.maxDistance}&date=${startTime}&last_date=${endTime}`,\n            );\n            if (result.data) {\n                this.log.debug(`Hourly weather data fetched successfully: ${JSON.stringify(result.data)}`);\n                if (result.data.weather && Array.isArray(result.data.weather)) {\n                    await this.library.writeFromJson(\n                        'hourly.r',\n                        'weather.hourly',\n                        genericStateObjects,\n                        result.data.weather,\n                        true,\n                    );\n                    await this.library.writedp(\n                        'hourly.sources',\n                        undefined,\n                        genericStateObjects.weather.sources._channel,\n                    );\n                    await this.library.writeFromJson(\n                        'hourly.sources.r',\n                        'weather.sources',\n                        genericStateObjects,\n                        result.data.sources,\n                        true,\n                    );\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching weather data: ${JSON.stringify(error)}`);\n        }\n    }\n    async weatherCurrentlyUpdate(): Promise<void> {\n        try {\n            const result = await axios.get(\n                `https://api.brightsky.dev/current_weather?${this.posId}&max_dist=${this.config.maxDistance}`,\n            );\n            if (result.data) {\n                this.log.debug(`Currently weather data fetched successfully: ${JSON.stringify(result.data)}`);\n                if (result.data.weather) {\n                    result.data.weather.wind_bearing_text = this.getWindBearingText(\n                        result.data.weather.wind_direction_10 ?? undefined,\n                    );\n                    await this.library.writeFromJson(\n                        'current',\n                        'weather.current',\n                        genericStateObjects,\n                        result.data.weather,\n                        true,\n                    );\n                    await this.library.writedp(\n                        'current.sources',\n                        undefined,\n                        genericStateObjects.weather.sources._channel,\n                    );\n                    await this.library.writeFromJson(\n                        'current.sources.r',\n                        'weather.sources',\n                        genericStateObjects,\n                        result.data.sources,\n                        true,\n                    );\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching weather data: ${JSON.stringify(error)}`);\n        }\n    }\n    private getWindBearingText(windBearing: number | undefined): string {\n        if (windBearing === undefined) {\n            return '';\n        }\n        const directions = [\n            'N',\n            'NNE',\n            'NE',\n            'ENE',\n            'E',\n            'ESE',\n            'SE',\n            'SSE',\n            'S',\n            'SSW',\n            'SW',\n            'WSW',\n            'W',\n            'WNW',\n            'NW',\n            'NNW',\n        ];\n        const index = Math.round((windBearing % 360) / 22.5) % 16;\n        return directions[index];\n    }\n\n    private onUnload(callback: () => void): void {\n        this.unload = true;\n\n        try {\n            for (const timeout of this.weatherTimeout) {\n                if (timeout) {\n                    this.clearTimeout(timeout);\n                }\n            }\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    /**\n     * Pick best fitting weather icon (MDI day variant only) for one aggregated daily bucket.\n     * Works directly on hourly values (conditions, wind, precipitation, etc.).\n     *\n     * @param bucket Aggregated hourly data for one day\n     * @param bucket.condition\n     * @param bucket.wind_speed\n     * @param bucket.precipitation\n     * @param bucket.cloud_cover\n     * @returns Weather icon string (MDI icon name, day variant only)\n     */\n    pickDailyWeatherIcon(bucket: {\n        condition: (string | null | undefined)[];\n        wind_speed: (number | null | undefined)[];\n        precipitation?: (number | null | undefined)[];\n        cloud_cover?: (number | null | undefined)[];\n    }): string {\n        // --- inline helpers ---\n        const avg = (arr: (number | null | undefined)[]): number => {\n            const xs = arr.filter((v): v is number => v != null);\n            return xs.length ? xs.reduce((a, b) => a + b, 0) / xs.length : 0;\n        };\n        const maxN = (arr: (number | null | undefined)[]): number => {\n            const xs = arr.filter((v): v is number => v != null);\n            return xs.length ? Math.max(...xs) : 0;\n        };\n        const count = (arr: (string | null | undefined)[], labels: string[]): number =>\n            arr.filter(v => v != null && labels.includes(v)).length;\n\n        // --- thresholds ---\n        const WIND_ORKAN = 118.8; // km/h (\u2248 Orkanst\u00E4rke)\n        const WIND_STORM = 61.2; // km/h (Sturm/very windy)\n\n        const FRACTION_THUNDER_PARTLY = 0.1;\n        const FRACTION_THUNDER_SOLID = 0.35;\n        const FRACTION_RAIN_SOLID = 0.5;\n        const FRACTION_RAIN_LIGHT = 0.2;\n\n        const hours = bucket.condition.length || 24;\n\n        // 1) ORKAN (h\u00F6chste Priorit\u00E4t)\n        const maxWind = maxN(bucket.wind_speed);\n        if (maxWind >= WIND_ORKAN) {\n            return 'weather-tornado';\n        }\n\n        // 2) GEWITTER\n        const thunderCount = count(bucket.condition, ['thunderstorm']);\n        if (thunderCount / hours >= FRACTION_THUNDER_SOLID) {\n            return 'weather-lightning';\n        }\n        if (thunderCount / hours >= FRACTION_THUNDER_PARTLY) {\n            return 'weather-partly-lightning';\n        }\n\n        // 3) STURM (sehr windig)\n        if (maxWind >= WIND_STORM) {\n            return 'weather-windy';\n        }\n\n        // 4) HAGEL\n        const hailCount = count(bucket.condition, ['hail']);\n        if (hailCount > 0) {\n            return 'weather-hail';\n        }\n\n        // 5) SCHNEE\n        const snowCount = count(bucket.condition, ['snow']);\n        if (snowCount / hours >= 0.3) {\n            return 'weather-snowy-heavy';\n        }\n        if (snowCount > 0) {\n            return 'weather-snowy';\n        }\n\n        // 6) SCHWERER REGEN\n        const rainCount = count(bucket.condition, ['rain', 'sleet', 'drizzle']);\n        if (rainCount / hours >= FRACTION_RAIN_SOLID) {\n            return 'weather-pouring';\n        }\n\n        // 7) NEBEL\n        const fogCount = count(bucket.condition, ['fog']);\n        if (fogCount / hours > 0.2) {\n            return 'weather-fog';\n        }\n\n        // 8) LEICHTER REGEN\n        if (rainCount / hours >= FRACTION_RAIN_LIGHT) {\n            return 'weather-rainy';\n        }\n\n        // 9) Bew\u00F6lkung vs. Sonne\n        const avgClouds = bucket.cloud_cover ? avg(bucket.cloud_cover) : 0;\n        if (avgClouds > 80) {\n            return 'weather-cloudy';\n        }\n        if (avgClouds > 40) {\n            return 'weather-partly-cloudy';\n        }\n\n        // Default\n        return 'weather-sunny';\n    }\n}\n\ntype Panel = {\n    /** Azimut des Panels in Grad, 0 = Norden, 90 = Osten, 180 = S\u00FCden, 270 = Westen */\n    azimuth: number;\n    /** Neigung in Grad, 0 = horizontal, 90 = senkrecht */\n    tilt: number;\n    /** Fl\u00E4che in m\u00B2 */\n    area: number;\n    /** Wirkungsgrad 0..1 */\n    efficiency: number;\n};\n\ntype Coords = { lat: number; lon: number };\n\n/**\n * Sch\u00E4tzt die erzeugte elektrische Energie (Wh) f\u00FCr die kommende Stunde.\n *\n * @param valueWhPerM2 GHI f\u00FCr die Stunde (Wh/m\u00B2) auf horizontaler Ebene\n * @param time Zeitstempel dieser Stunde (Date | number | string)\n * @param coords { lat, lon }\n * @param panels Array von Panels (azimuth, tilt, area, efficiency in %)\n * @returns Wh (elektrisch) f\u00FCr alle Panels zusammen\n */\nexport function estimatePVEnergyForHour(\n    valueWhPerM2: number,\n    time: Date | number | string,\n    coords: Coords,\n    panels: Panel[],\n): number {\n    // ===== Helpers (funktion-lokal) =====\n    const toRad = (d: number): number => (d * Math.PI) / 180;\n    const clamp01 = (x: number): number => Math.min(1, Math.max(0, x));\n    const normEff = (pct: number): number => clamp01(pct / 100); // 0..100% \u2192 0..1\n\n    // Konstanten (einfaches, robustes Modell)\n    const ALBEDO = 0.2; // Bodenreflexionsfaktor\n\n    // Sonnenstand holen\n    const date = time instanceof Date ? time : new Date(time);\n    const pos = suncalc.getPosition(date, coords.lat, coords.lon);\n    const sunEl = pos.altitude; // Elevation in rad\n    // SunCalc-Azimut: 0 = S\u00FCd, +West; auf 0=N, 90=E normieren:\n    const sunAzDeg = ((pos.azimuth * 180) / Math.PI + 180 + 360) % 360;\n    const sunAz = toRad(sunAzDeg);\n\n    if (sunEl <= 0 || valueWhPerM2 <= 0 || panels.length === 0) {\n        return 0;\n    }\n\n    // Grobe Aufteilung in Direkt/Diffus aus Elevation (ohne externe Daten):\n    const beamFraction = clamp01(Math.sin(sunEl) * 1.1);\n    const diffuseFraction = 1 - beamFraction;\n\n    let totalWh = 0;\n\n    for (const p of panels) {\n        const eff = normEff(p.efficiency);\n        if (eff <= 0 || p.area <= 0) {\n            continue;\n        }\n\n        const tilt = toRad(p.tilt);\n        const az = toRad(((p.azimuth % 360) + 360) % 360);\n\n        // Modulnormalen-Vektor\n        const nx = Math.sin(tilt) * Math.sin(az);\n        const ny = Math.sin(tilt) * Math.cos(az);\n        const nz = Math.cos(tilt);\n\n        // Sonnenvektor\n        const sx = Math.cos(sunEl) * Math.sin(sunAz);\n        const sy = Math.cos(sunEl) * Math.cos(sunAz);\n        const sz = Math.sin(sunEl);\n\n        // Einfallswinkel\n        const cosTheta = Math.max(0, nx * sx + ny * sy + nz * sz);\n\n        // Direktanteil von horizontal \u2192 Modulfl\u00E4che\n        const dirGain = cosTheta / Math.max(1e-6, Math.sin(sunEl));\n\n        // Diffus isotrop + Bodenreflexion\n        const skyDiffuseGain = (1 + Math.cos(tilt)) / 2;\n        const groundRefGain = (ALBEDO * (1 - Math.cos(tilt))) / 2;\n\n        // POA-Energie (Wh/m\u00B2) auf dem Modul f\u00FCr die Stunde\n        const poaWhPerM2 = valueWhPerM2 * (beamFraction * dirGain + diffuseFraction * skyDiffuseGain + groundRefGain);\n\n        // Elektrische Energie\n        const elecWh = Math.max(0, poaWhPerM2) * p.area * eff;\n        totalWh += elecWh;\n    }\n\n    return totalWh;\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Brightsky(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Brightsky())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
