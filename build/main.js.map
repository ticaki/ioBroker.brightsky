{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\ntype Coords = { lat: number; lon: number };\n\ntype Panel = ioBroker.AdapterConfig['panels'][0];\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/library';\nimport type { BrightskyCurrently, BrightskyHourly, BrightskyRadarResponse, BrightskyRadarData } from './lib/definition';\nimport {\n    genericStateObjects,\n    type BrightskyDailyData,\n    type BrightskyDayNightData,\n    type BrightskyWeather,\n} from './lib/definition';\nimport * as suncalc from 'suncalc';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Brightsky extends utils.Adapter {\n    library: Library;\n    unload: boolean = false;\n    posId: string = '';\n    weatherTimeout: (ioBroker.Timeout | null | undefined)[] = [];\n    controller: AbortController | null = null;\n    timeoutId: ioBroker.Timeout | undefined = undefined;\n    groupArray: Panel[][] = [];\n    wrArray: number[] = [];\n    radarData: BrightskyRadarData[] = [];\n    radarRotationTimeout: ioBroker.Timeout | null | undefined = undefined;\n    \n    /**\n     * Creates a new instance of the Brightsky adapter\n     * @param options Adapter configuration options\n     */\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'brightsky',\n        });\n        this.on('ready', this.onReady.bind(this));\n        // this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.library = new Library(this, 'Brightsky');\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Create the connection state object if it doesn't exist\n        await this.setObjectNotExistsAsync('info.connection', {\n            type: 'state',\n            common: {\n                name: 'Connection status',\n                type: 'boolean',\n                role: 'indicator.connected',\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.setState('info.connection', false, true);\n        if (!this.config.createDaily) {\n            await this.delObjectAsync('daily', { recursive: true });\n        } else {\n            // Create the daily data folder\n            await this.library.writedp('daily', null, genericStateObjects.weather.daily._channel);\n        }\n        if (!this.config.createCurrently) {\n            await this.delObjectAsync('current', { recursive: true });\n        } else {\n            // Create the currently data folder\n            await this.library.writedp('current', null, genericStateObjects.weather.current._channel);\n        }\n        if (!this.config.createHourly) {\n            await this.delObjectAsync('hourly', { recursive: true });\n        } else {\n            // Create the hourly data folder\n            await this.library.writedp('hourly', null, genericStateObjects.weather.hourly._channel);\n            await this.library.writedp('hourly.sources', undefined, genericStateObjects.weather.sources._channel);\n        }\n        if (!this.config.createRadar) {\n            await this.delObjectAsync('radar', { recursive: true });\n        } else {\n            // Create the radar data folder\n            await this.library.writedp('radar', null, genericStateObjects.weather.radar._channel);\n            await this.library.writedp(\n                `radar.max_precipitation_forecast`,\n                null,\n                genericStateObjects.max_precipitation_forecast._channel,\n            );\n            // Create radar.data folder only if createRadarData is enabled\n            if (!this.config.createRadarData) {\n                await this.delObjectAsync('radar.data', { recursive: true });\n            } else {\n                await this.library.writedp(`radar.data`, null, {\n                    _id: '',\n                    type: 'channel',\n                    common: { name: 'Radar Data' },\n                    native: {},\n                });\n            }\n        }\n        if (\n            !this.config.createCurrently &&\n            !this.config.createHourly &&\n            !this.config.createDaily &&\n            !this.config.createRadar\n        ) {\n            this.log.error(\n                'No data creation is enabled in the adapter configuration. Please enable at least one of the options: Currently, Hourly, Daily, or Radar.',\n            );\n            return;\n        }\n        if (this.config.wmo_station == undefined || typeof this.config.wmo_station !== 'string') {\n            this.log.warn(`Invalid WMO station ID. Using default value of \"\".`);\n            this.config.wmo_station = ''; // Default to 0 if invalid\n        }\n        if (this.config.dwd_station_id == undefined || typeof this.config.dwd_station_id !== 'string') {\n            this.log.warn(`Invalid DWD station ID. Using default value of \"\".`);\n            this.config.dwd_station_id = ''; // Default to 0 if invalid\n        }\n\n        this.wrArray.push(this.config.wr1 ?? 0);\n        this.wrArray.push(this.config.wr2 ?? 0);\n        this.wrArray.push(this.config.wr3 ?? 0);\n        this.wrArray.push(this.config.wr4 ?? 0);\n        this.wrArray.forEach(() => {\n            this.groupArray.push([]);\n        });\n        if (this.config.panels) {\n            for (const p of this.config.panels) {\n                const wr = (p.wr ?? 0) | 0; // default 0; ensure int\n                if (wr >= 0 && wr < this.wrArray.length) {\n                    this.groupArray[wr].push(p);\n                }\n            }\n        }\n\n        if (this.config.wmo_station !== '' && this.config.dwd_station_id !== '') {\n            this.log.warn(\n                'Both WMO station ID and DWD station ID are set. Using DWD station ID for location identification.',\n            );\n            this.config.wmo_station = ''; // Clear WMO station ID if DWD station ID is set\n        }\n        this.posId = this.config.dwd_station_id\n            ? `dwd_station_id=${this.config.dwd_station_id}`\n            : this.config.wmo_station == ''\n              ? `lat=${this.config.position.split(',')[0]}&lon=${this.config.position.split(',')[1]}&`\n              : `wmo_station_id=${this.config.wmo_station}`;\n        if (\n            !this.config.position ||\n            typeof this.config.position !== 'string' ||\n            !this.config.position.split(',').every(coord => !isNaN(parseFloat(coord)))\n        ) {\n            this.log.error('Position is not set in the adapter configuration. Please set it in the adapter settings.');\n            return;\n        }\n        if (this.config.panels == undefined || !Array.isArray(this.config.panels)) {\n            this.config.panels = [];\n        }\n        if (this.config.hours == undefined || this.config.hours < 0 || this.config.hours > 48) {\n            this.log.warn(`Invalid hours to display: ${this.config.hours}. Using default value of 24 hours.`);\n            this.config.hours = 24; // Default to 24 hours if invalid\n        }\n\n        if (\n            this.config.pollInterval == undefined ||\n            this.config.pollInterval < 1 ||\n            this.config.pollInterval >= 2 ** 31 / (60000 * 60)\n        ) {\n            this.log.warn(`Invalid poll interval: ${this.config.pollInterval}. Using default value of 12 hour.`);\n            this.config.pollInterval = 12; // Default to 1 hour if invalid\n        }\n        if (\n            this.config.pollIntervalCurrently == undefined ||\n            this.config.pollIntervalCurrently < 10 ||\n            this.config.pollIntervalCurrently >= 2 ** 31 / 60000\n        ) {\n            this.log.warn(\n                `Invalid poll interval currently: ${this.config.pollIntervalCurrently}. Using default value of 30 minute.`,\n            );\n            this.config.pollIntervalCurrently = 60; // Default to 1 minute if invalid\n        }\n\n        if (this.config.maxDistance == undefined || this.config.maxDistance < 1000) {\n            this.log.warn(`Invalid max distance: ${this.config.maxDistance}. Using default value of 50000 meters.`);\n            this.config.maxDistance = 50000; // Default to 50 km if invalid\n        }\n\n        if (\n            this.config.pollIntervalRadar == undefined ||\n            this.config.pollIntervalRadar < 5 ||\n            this.config.pollIntervalRadar >= 2 ** 31 / 60000\n        ) {\n            this.log.warn(\n                `Invalid poll interval radar: ${this.config.pollIntervalRadar}. Using default value of 10 minutes.`,\n            );\n            this.config.pollIntervalRadar = 10; // Default to 10 minutes if invalid\n        }\n\n        // Ensure radar interval is divisible by 5\n        if (this.config.pollIntervalRadar % 5 !== 0) {\n            const adjusted = Math.round(this.config.pollIntervalRadar / 5) * 5;\n            this.log.warn(\n                `Radar poll interval must be divisible by 5. Adjusting from ${this.config.pollIntervalRadar} to ${adjusted} minutes.`,\n            );\n            this.config.pollIntervalRadar = adjusted;\n        }\n\n        // Validate radar distance (max 50km)\n        if (\n            this.config.radarDistance == undefined ||\n            this.config.radarDistance < 1000 ||\n            this.config.radarDistance > 50000\n        ) {\n            this.log.warn(\n                `Invalid radar distance: ${this.config.radarDistance}. Using default value of 10000 meters (10 km).`,\n            );\n            this.config.radarDistance = 10000; // Default to 10 km if invalid\n        }\n\n        if (this.config.createCurrently) {\n            await this.delay(3000); // Wait for 1 second to ensure the adapter is ready\n            await this.weatherCurrentlyLoop();\n        }\n        if (this.config.createHourly) {\n            await this.delay(3000);\n            await this.weatherHourlyLoop();\n        }\n        if (this.config.createDaily) {\n            await this.delay(3000);\n            await this.weatherDailyLoop();\n        }\n        if (this.config.createRadar) {\n            await this.delay(3000);\n            await this.weatherRadarLoop();\n        }\n        this.log.info(\n            `Adapter started with configuration: Position: ${this.config.position}, WMO Station ID: ${this.config.wmo_station}, DWD Station ID: ${this.config.dwd_station_id}, ${this.config.createCurrently ? `Currently data enabled. Poll interval: ${this.config.pollIntervalCurrently} minutes` : 'Currently data disabled'} - ${this.config.createHourly ? `Hourly data enabled. Poll interval: ${this.config.pollInterval} hours` : 'Hourly data disabled'} - ${this.config.createDaily ? 'Daily data enabled' : 'Daily data disabled'} - ${this.config.createRadar ? `Radar data enabled. Poll interval: ${this.config.pollIntervalRadar} minutes` : 'Radar data disabled'}. Max distance: ${this.config.maxDistance} meters.`,\n        );\n        this.log.info(\n            `Using ${this.config.dwd_station_id ? `WMO Station ID: ${this.config.dwd_station_id}` : `${this.config.wmo_station ? `WMO Station ID: ${this.config.wmo_station}` : `Position: ${this.config.position} with max distance: ${this.config.maxDistance} meters`}`}`,\n        );\n    }\n\n    /**\n     * Manages the daily weather data update loop\n     * Schedules updates at specific times: 5:00, 18:00, and midnight with random delay\n     */\n    async weatherDailyLoop(): Promise<void> {\n        if (this.weatherTimeout[2]) {\n            this.clearTimeout(this.weatherTimeout[2]);\n        }\n        await this.weatherDailyUpdate();\n        let loopTime = 100000;\n        if (new Date().getHours() >= 5 && new Date().getHours() < 18) {\n            loopTime = new Date().setHours(18, 0, 0, 0) + 30000 + Math.ceil(Math.random() * 5000);\n        } else if (new Date().getHours() >= 18) {\n            loopTime = new Date().setHours(0, 0, 0, 0) + 30000 + Math.ceil(Math.random() * 60000);\n        } else {\n            loopTime = new Date().setHours(5, 0, 0, 0) + 30000 + Math.ceil(Math.random() * 5000);\n        }\n        loopTime = loopTime - Date.now(); // Calculate the time until the next update\n        if (loopTime <= 0) {\n            loopTime = loopTime + 24 * 60 * 60 * 1000; // If the time is in the past, set it to the next day\n        }\n        this.weatherTimeout[2] = this.setTimeout(() => {\n            void this.weatherDailyLoop();\n        }, loopTime);\n    }\n\n    /**\n     * Fetches and processes daily weather forecast data from BrightSky API\n     * Retrieves weather data for the next 8 days and creates aggregated daily values\n     */\n    async weatherDailyUpdate(): Promise<void> {\n        const startTime = new Date(new Date().setHours(0, 0, 0, 0)).toISOString();\n        const endTime = new Date(\n            new Date(new Date().setHours(23, 59, 59, 999)).setDate(new Date().getDate() + 7),\n        ).toISOString();\n        try {\n            const response = await this.fetch(\n                `https://api.brightsky.dev/weather?${this.posId}&max_dist=${this.config.maxDistance}&date=${startTime}&last_date=${endTime}`,\n            );\n            this.log.debug(\n                `https://api.brightsky.dev/weather?lat=${this.config.position.split(',')[0]}&lon=${this.config.position.split(',')[1]}&max_dist=${this.config.maxDistance}&date=${startTime}&last_date=${endTime}`,\n            );\n            if (response.status !== 200) {\n                throw new Error(`Error fetching daily weather data: ${response.status} ${response.statusText}`);\n            }\n            const result = { data: await response.json() } as {\n                data: { weather: BrightskyWeather[]; sources: any[] } | null;\n            };\n            if (result.data) {\n                this.log.debug(`Daily weather data fetched successfully: ${JSON.stringify(result.data)}`);\n                if (result.data.weather && Array.isArray(result.data.weather)) {\n                    const weatherArr: Record<string, (string | number | null)[]>[] = [];\n                    const resultArr: Partial<BrightskyDailyData>[] = [];\n                    const currentDay = Math.floor(new Date().getTime() / (24 * 60 * 60 * 1000)); // Current day in milliseconds\n                    for (const item of result.data.weather as BrightskyWeather[]) {\n                        if (!item) {\n                            continue; // Skip if item is null or undefined\n                        }\n                        const dataDay = Math.floor(new Date(item.timestamp).getTime() / (24 * 60 * 60 * 1000));\n                        const day = dataDay - currentDay;\n                        if (weatherArr[day] === undefined) {\n                            weatherArr[day] = {};\n                        }\n                        for (const key of Object.keys(item)) {\n                            if (weatherArr[day][key] === undefined) {\n                                weatherArr[day][key] = [];\n                            }\n                            const k = key as keyof BrightskyWeather;\n                            weatherArr[day][key].push(item[k] ?? null);\n                        }\n                    }\n                    for (let i = 0; i < weatherArr.length; i++) {\n                        const dailyData: Partial<BrightskyDailyData> = {};\n                        this.log.debug(`Processing daily data for day ${i}: ${JSON.stringify(weatherArr[i])}`);\n                        for (const key of Object.keys(weatherArr[i])) {\n                            const k = key as keyof BrightskyWeather;\n                            switch (k) {\n                                case 'precipitation':\n                                case 'wind_gust_speed':\n                                case 'precipitation_probability':\n                                case 'precipitation_probability_6h':\n                                case 'wind_speed': {\n                                    const values = weatherArr[i][k] as (number | null)[];\n                                    if (values && values.length > 0) {\n                                        for (let j = 0; j < values.length; j++) {\n                                            if (values[j] === null) {\n                                                values[j] = 0; // Set null values to 0\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            switch (k) {\n                                case 'timestamp': {\n                                    dailyData.timestamp = weatherArr[i].timestamp[0] as string;\n                                    break;\n                                }\n                                case 'source_id': {\n                                    dailyData.source_id = weatherArr[i].source_id[0] as number;\n                                    break;\n                                }\n                                case 'precipitation':\n                                case 'wind_speed':\n                                case 'solar':\n                                case 'temperature': {\n                                    const values = weatherArr[i][k] as (number | null)[];\n                                    if (values && values.length > 0) {\n                                        const min = Math.min(...(values.filter(v => v !== null) as number[]));\n                                        const max = Math.max(...(values.filter(v => v !== null) as number[]));\n\n                                        if (k !== 'solar') {\n                                            dailyData[`${k}_min`] = min !== Infinity ? min : null;\n                                        } else {\n                                            dailyData.solar_estimate = 0;\n                                            if (\n                                                this.config.position.split(',').length === 2 &&\n                                                this.config.panels.length > 0\n                                            ) {\n                                                dailyData.solar_estimate = values.reduce((sum, value, index) => {\n                                                    if (typeof sum !== 'number') {\n                                                        sum = 0; // Initialize sum to 0 if it's not a number\n                                                    }\n                                                    if (value) {\n                                                        const newValue = this.estimatePVEnergyForHour(\n                                                            value,\n                                                            new Date(weatherArr[i].timestamp[index] as string),\n                                                            {\n                                                                lat: parseFloat(this.config.position.split(',')[0]),\n                                                                lon: parseFloat(this.config.position.split(',')[1]),\n                                                            },\n                                                            this.config.panels,\n                                                        );\n\n                                                        return sum + newValue;\n                                                    }\n                                                    return sum;\n                                                });\n                                                dailyData.solar_estimate = dailyData.solar_estimate\n                                                    ? Math.round(dailyData.solar_estimate * 1000) / 1000\n                                                    : dailyData.solar_estimate;\n                                            }\n                                            if (new Date().getHours() === 5) {\n                                                dailyData.solar_forHomoran = values.reduce((sum, value) => {\n                                                    if (typeof sum !== 'number') {\n                                                        sum = 0; // Initialize sum to 0 if it's not a number\n                                                    }\n                                                    if (value != null && typeof value === 'number') {\n                                                        return sum + value;\n                                                    }\n                                                    return sum;\n                                                });\n                                                if (dailyData.solar_estimate != null) {\n                                                    dailyData.solar_estimateForHomoran = dailyData.solar_estimate;\n                                                }\n                                            }\n                                        }\n                                        dailyData[`${k}_max`] = max !== -Infinity ? max : null;\n                                    } else {\n                                        if (k !== 'solar') {\n                                            dailyData[`${k}_min`] = null;\n                                        }\n                                    }\n                                }\n                                // eslint-disable-next-line no-fallthrough\n                                case 'sunshine': {\n                                    if (k === 'precipitation' || k === 'sunshine' || k === 'solar') {\n                                        const t = weatherArr[i][k].reduce((sum, value) => {\n                                            if (typeof sum !== 'number') {\n                                                sum = 0; // Initialize sum to 0 if it's not a number\n                                            }\n                                            if (value != null && typeof value === 'number') {\n                                                return sum + value;\n                                            }\n                                            return sum;\n                                        }, 0);\n                                        dailyData[k] = null;\n                                        if (t !== null && typeof t === 'number') {\n                                            dailyData[k] =\n                                                k !== 'solar' ? Math.round(t * 10) / 10 : Math.round(t * 1000) / 1000;\n                                        }\n                                        break;\n                                    }\n                                }\n                                // eslint-disable-next-line no-fallthrough\n                                case 'wind_direction':\n                                case 'cloud_cover':\n                                case 'dew_point':\n                                case 'relative_humidity':\n                                case 'visibility':\n                                case 'wind_gust_direction':\n                                case 'wind_gust_speed':\n                                case 'precipitation_probability':\n                                case 'precipitation_probability_6h': {\n                                    const values = weatherArr[i][k] as (number | null)[];\n                                    if (values && values.length > 0) {\n                                        if (values && values.length > 0) {\n                                            let median: number | null = null;\n                                            if (values.filter(v => v !== null).length > 0) {\n                                                const sortedValues = values\n                                                    .filter(v => v !== null)\n                                                    .sort((a, b) => a - b);\n                                                const mid = Math.floor(sortedValues.length / 2);\n                                                if (sortedValues.length % 2 === 0) {\n                                                    median = (sortedValues[mid - 1] + sortedValues[mid]) / 2;\n                                                } else {\n                                                    median = sortedValues[mid];\n                                                }\n                                            }\n                                            let avg = values.reduce((sum, value) => {\n                                                if (value != null) {\n                                                    return sum == null ? 0 + value : sum + value;\n                                                }\n                                                return sum;\n                                            }, 0);\n                                            if (avg != null) {\n                                                if (values.filter(v => v !== null).length > 12) {\n                                                    avg =\n                                                        Math.round((avg / values.filter(v => v !== null).length) * 10) /\n                                                        10;\n                                                } else {\n                                                    avg = null;\n                                                }\n                                            }\n                                            dailyData[`${k}_median`] = median;\n                                            dailyData[k] = avg;\n                                        } else {\n                                            dailyData[k] = null;\n                                            dailyData[`${k}_median`] = null;\n                                        }\n                                    }\n                                    break;\n                                }\n                                case 'icon':\n                                case 'condition': {\n                                    const tempArr: { value: string | number; count: number }[] = [];\n                                    for (const value of weatherArr[i][k]) {\n                                        if (value) {\n                                            const index = tempArr.findIndex(el => el.value === value);\n                                            if (index !== -1) {\n                                                tempArr[index].count++;\n                                            } else {\n                                                tempArr.push({ value, count: 1 });\n                                            }\n                                        }\n                                    }\n                                    tempArr.sort((a, b) => b.count - a.count);\n                                    if (tempArr.length > 0) {\n                                        if (k === 'icon') {\n                                            tempArr[0].value = (tempArr[0].value as string).replace('-night', '-day');\n                                        }\n                                        dailyData[k] = tempArr[0].value as string;\n                                    } else {\n                                        dailyData[k] = null;\n                                    }\n                                    const iconsDay = this.pickDailyWeatherIcon({\n                                        condition: weatherArr[i].condition as (string | null | undefined)[],\n                                        wind_speed: weatherArr[i].wind_speed as (number | null | undefined)[],\n                                        cloud_cover: weatherArr[i].cloud_cover as (number | null | undefined)[],\n                                    });\n                                    dailyData.icon_special = iconsDay.mdi;\n                                    (dailyData as any).iconUrl = iconsDay.url;\n                                    break;\n                                }\n                            }\n                        }\n\n                        /*const dailyData: Partial<BrightskyDailyData> = {\n                        ...weatherArr.d[i],\n                        precipitation_min: weatherArr.min[i].precipitation,\n                        precipitation_max: weatherArr.max[i].precipitation,\n                        wind_speed_min: weatherArr.min[i].wind_speed,\n                        wind_speed_max: weatherArr.max[i].wind_speed,\n                        temperature_min: weatherArr.min[i].temperature,\n                        temperature_max: weatherArr.max[i].temperature,\n                    };*/\n                        const times = suncalc.getTimes(\n                            new Date(dailyData.timestamp as string),\n                            parseFloat(this.config.position.split(',')[0]),\n                            parseFloat(this.config.position.split(',')[1]),\n                        );\n                        dailyData.sunset = times.sunset.getTime();\n                        dailyData.sunrise = times.sunrise.getTime();\n\n                        // Add weekday names in system language\n                        const date = new Date(dailyData.timestamp as string);\n                        const systemLanguage = this.library.getLocalLanguage();\n                        dailyData.dayName_short = date.toLocaleString(systemLanguage, { weekday: 'short' });\n                        dailyData.dayName_long = date.toLocaleString(systemLanguage, { weekday: 'long' });\n\n                        // Calculate day and night data\n                        const { dayData, nightData } = this.calculateDayNightData(\n                            weatherArr[i],\n                            times.sunrise,\n                            times.sunset,\n                        );\n                        dailyData.day = dayData;\n                        dailyData.night = nightData;\n\n                        resultArr.push(dailyData);\n                    }\n\n                    await this.library.writeFromJson('daily.r', 'weather.daily', genericStateObjects, resultArr, true);\n\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching daily weather data: ${JSON.stringify(error)}`);\n        }\n    }\n\n    /**\n     * Manages the current weather data update loop\n     * Automatically adjusts polling interval around sunrise/sunset times\n     */\n    async weatherCurrentlyLoop(): Promise<void> {\n        if (this.weatherTimeout[0]) {\n            this.clearTimeout(this.weatherTimeout[0]);\n        }\n        await this.weatherCurrentlyUpdate();\n\n        let nextInterval = this.config.pollIntervalCurrently * 60000 + Math.ceil(Math.random() * 8000);\n\n        const coords = this.config.position.split(',').map(parseFloat);\n        const { sunrise, sunset } = suncalc.getTimes(new Date(), coords[0], coords[1]);\n\n        const now = Date.now();\n        const testTime = now > sunset.getTime() ? sunrise : now > sunrise.getTime() ? sunset : sunrise;\n\n        if (now + nextInterval > testTime.getTime() && testTime.getTime() > now) {\n            nextInterval = testTime.getTime() - now + 30000 + Math.ceil(Math.random() * 5000);\n        }\n\n        this.weatherTimeout[0] = this.setTimeout(() => {\n            void this.weatherCurrentlyLoop();\n        }, nextInterval);\n    }\n\n    /**\n     * Manages the hourly weather data update loop\n     * Schedules updates based on configured poll interval with random delay\n     */\n    async weatherHourlyLoop(): Promise<void> {\n        if (this.weatherTimeout[1]) {\n            this.clearTimeout(this.weatherTimeout[1]);\n        }\n        await this.weatherHourlyUpdate();\n        const loopTime =\n            new Date().setHours(new Date().getHours() + this.config.pollInterval, 0, 0) +\n            3000 +\n            Math.ceil(Math.random() * 5000); // Add a random delay of up to 5 second\n        this.weatherTimeout[1] = this.setTimeout(() => {\n            void this.weatherHourlyLoop();\n        }, loopTime - Date.now());\n    }\n    \n    /**\n     * Fetches and processes hourly weather forecast data from BrightSky API\n     * Retrieves weather data for the configured number of hours ahead\n     */\n    async weatherHourlyUpdate(): Promise<void> {\n        const startTime = new Date(new Date().setMinutes(0, 0, 0)).toISOString();\n        const endTime = new Date(new Date().setHours(new Date().getHours() + this.config.hours, 0, 0, 0)).toISOString();\n        try {\n            const response = await this.fetch(\n                `https://api.brightsky.dev/weather?${this.posId}&max_dist=${this.config.maxDistance}&date=${startTime}&last_date=${endTime}`,\n            );\n            if (response.status !== 200) {\n                throw new Error(`Error fetching hourly weather data: ${response.status} ${response.statusText}`);\n            }\n            const result = { data: await response.json() } as {\n                data: BrightskyHourly | null;\n            };\n            if (result.data) {\n                this.log.debug(`Hourly weather data fetched successfully: ${JSON.stringify(result.data)}`);\n\n                if (result.data.weather && Array.isArray(result.data.weather)) {\n                    const coords = this.config.position.split(',').map(parseFloat);\n                    for (const item of result.data.weather) {\n                        if (!item) {\n                            continue; // Skip if item is null or undefined\n                        }\n                        item.solar_estimate = 0;\n                        item.wind_bearing_text = this.getWindBearingText(item.wind_direction ?? undefined);\n                        // Determine day/night for this hour\n                        const t = new Date(item.timestamp);\n                        const { sunrise, sunset } = suncalc.getTimes(t, coords[0], coords[1]);\n                        const isDayTime = t >= sunrise && t <= sunset;\n                        // Icons for hourly\n                        const iconsHour = this.pickHourlyWeatherIcon({\n                            condition: item.condition,\n                            wind_speed: item.wind_speed,\n                            cloud_cover: item.cloud_cover,\n                            day: isDayTime,\n                            precipitation_probability: item.precipitation_probability,\n                        });\n                        (item as any).icon_special = iconsHour.mdi;\n                        (item as any).iconUrl = iconsHour.url;\n                        if (\n                            this.config.position.split(',').length === 2 &&\n                            this.config.panels.length > 0 &&\n                            item.solar\n                        ) {\n                            item.solar_estimate = this.estimatePVEnergyForHour(\n                                item.solar ?? 0,\n                                item.timestamp,\n                                {\n                                    lat: parseFloat(this.config.position.split(',')[0]),\n                                    lon: parseFloat(this.config.position.split(',')[1]),\n                                },\n                                this.config.panels,\n                            );\n                            if (item.solar_estimate) {\n                                item.solar_estimate = Math.round(item.solar_estimate * 1000) / 1000;\n                            }\n                        }\n                    }\n                    await this.library.writeFromJson(\n                        'hourly.r',\n                        'weather.hourly',\n                        genericStateObjects,\n                        result.data.weather,\n                        true,\n                    );\n                    await this.library.writedp(\n                        'hourly.sources',\n                        undefined,\n                        genericStateObjects.weather.sources._channel,\n                    );\n                    await this.library.writeFromJson(\n                        'hourly.sources.r',\n                        'weather.sources',\n                        genericStateObjects,\n                        result.data.sources,\n                        true,\n                    );\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching weather data: ${JSON.stringify(error)}`);\n        }\n    }\n    \n    /**\n     * Fetches and processes current weather data from BrightSky API\n     * Updates current weather states with latest observations\n     */\n    async weatherCurrentlyUpdate(): Promise<void> {\n        try {\n            const response = await this.fetch(\n                `https://api.brightsky.dev/current_weather?${this.posId}&max_dist=${this.config.maxDistance}`,\n            );\n            if (response.status !== 200) {\n                throw new Error(`Error fetching current weather data: ${response.status} ${response.statusText}`);\n            }\n            const result = { data: await response.json() } as any;\n            if (result.data) {\n                this.log.debug(`Currently weather data fetched successfully: ${JSON.stringify(result.data)}`);\n                if (result.data.weather) {\n                    const weather = result.data.weather as BrightskyCurrently;\n                    weather.wind_bearing_text = this.getWindBearingText(weather.wind_direction_10 ?? undefined);\n\n                    const coords = this.config.position.split(',').map(parseFloat);\n                    const { sunrise, sunset } = suncalc.getTimes(new Date(), coords[0], coords[1]);\n                    const now = new Date();\n                    const isDayTime = now >= sunrise && now <= sunset;\n\n                    const iconsNow = this.pickHourlyWeatherIcon({\n                        condition: weather.condition,\n                        wind_speed: weather.wind_speed_10,\n                        cloud_cover: weather.cloud_cover,\n                        day: isDayTime,\n                    });\n                    weather.icon_special = iconsNow.mdi;\n                    weather.iconUrl = iconsNow.url;\n                    await this.library.writeFromJson('current', 'weather.current', genericStateObjects, weather, true);\n                    await this.library.writedp(\n                        'current.sources',\n                        undefined,\n                        genericStateObjects.weather.sources._channel,\n                    );\n                    await this.library.writeFromJson(\n                        'current.sources.r',\n                        'weather.sources',\n                        genericStateObjects,\n                        result.data.sources,\n                        true,\n                    );\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching weather data: ${JSON.stringify(error)}`);\n        }\n    }\n\n    /**\n     * Manages the radar data update loop\n     * Schedules updates based on configured radar poll interval\n     */\n    async weatherRadarLoop(): Promise<void> {\n        if (this.weatherTimeout[3]) {\n            this.clearTimeout(this.weatherTimeout[3]);\n        }\n        await this.weatherRadarUpdate();\n\n        // Calculate next interval: configured minutes + 15s + random 0-5s\n        const nextInterval = this.config.pollIntervalRadar * 60000 + 15000 + Math.ceil(Math.random() * 5000);\n\n        this.weatherTimeout[3] = this.setTimeout(() => {\n            void this.weatherRadarLoop();\n        }, nextInterval);\n    }\n\n    /**\n     * Fetches and processes radar precipitation data from BrightSky API\n     * Updates radar states with precipitation measurements and forecasts\n     * \n     * API Documentation: https://brightsky.dev/docs/#/operations/getRadar\n     * OpenAPI Spec: https://api.brightsky.dev/openapi.json\n     *\n     * The 'distance' parameter defines how far the data extends to each side of the center point.\n     * For example, distance=10000 (10km) creates a square area of ~20km \u00D7 20km total.\n     */\n    async weatherRadarUpdate(): Promise<void> {\n        try {\n            const coords = this.config.position.split(',').map(parseFloat);\n            const now = new Date();\n            const twoHoursLater = new Date(now.getTime() + 2 * 60 * 60 * 1000);\n\n            // Format date for API (ISO 8601)\n            const dateParam = now.toISOString();\n\n            const response = await this.fetch(\n                `https://api.brightsky.dev/radar?lat=${coords[0]}&lon=${coords[1]}&distance=${this.config.radarDistance}&date=${dateParam}&format=plain`,\n            );\n\n            if (response.status !== 200) {\n                throw new Error(`Error fetching radar data: ${response.status} ${response.statusText}`);\n            }\n\n            const result = (await response.json()) as BrightskyRadarResponse;\n\n            if (result && result.radar && Array.isArray(result.radar)) {\n                this.log.debug(`Radar data fetched successfully: ${result.radar.length} items`);\n\n                // Filter data for now to +2 hours\n                const filteredRadar = result.radar.filter(item => {\n                    const itemTime = new Date(item.timestamp);\n                    return itemTime >= now && itemTime <= twoHoursLater;\n                });\n\n                // Store radar data with forecast metadata\n                const fetchTime = now.toISOString();\n                this.radarData = filteredRadar.map(item => {\n                    // Collect all precipitation values from 2D array\n                    const values: number[] = [];\n                    if (Array.isArray(item.precipitation_5)) {\n                        for (const row of item.precipitation_5) {\n                            if (Array.isArray(row)) {\n                                for (const value of row) {\n                                    if (typeof value === 'number') {\n                                        values.push(value);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // Calculate statistics\n                    let avg = 0;\n                    let min = 0;\n                    let max = 0;\n                    let median = 0;\n\n                    if (values.length > 0) {\n                        // Average\n                        const sum = values.reduce((acc, val) => acc + val, 0);\n                        avg = sum / values.length;\n\n                        // Min and Max\n                        min = Math.min(...values);\n                        max = Math.max(...values);\n\n                        // Median\n                        const sorted = [...values].sort((a, b) => a - b);\n                        const mid = Math.floor(sorted.length / 2);\n                        median = sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n                    }\n\n                    return {\n                        timestamp: item.timestamp,\n                        source: item.source,\n                        precipitation_5: Math.round(avg * 100) / 100, // Round to 2 decimal places\n                        precipitation_5_min: Math.round(min * 100) / 100,\n                        precipitation_5_max: Math.round(max * 100) / 100,\n                        precipitation_5_median: Math.round(median * 100) / 100,\n                        forecast_time: fetchTime,\n                    };\n                });\n\n                // Sort by timestamp to ensure correct order (index 0 = now, index 1 = +5min, etc.)\n                this.radarData.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n\n                // Write initial data\n                await this.writeRadarData();\n\n                // Setup rotation if poll interval > 5 minutes\n                if (this.config.pollIntervalRadar > 5) {\n                    this.setupRadarRotation();\n                }\n\n                await this.setState('info.connection', true, true);\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching radar data: ${JSON.stringify(error)}`);\n        }\n    }\n\n    /**\n     * Sets up automatic rotation of radar data every 5 minutes\n     * Used when poll interval is greater than 5 minutes to maintain continuous data\n     */\n    private setupRadarRotation(): void {\n        // Clear any existing rotation timeout\n        if (this.radarRotationTimeout) {\n            this.clearTimeout(this.radarRotationTimeout);\n        }\n\n        // Set up rotation every 5 minutes\n        const rotateRadarData = async (): Promise<void> => {\n            if (this.radarData.length === 0) {\n                return;\n            }\n\n            // Remove the first item (oldest)\n            this.radarData.shift();\n\n            // Add a placeholder at the end to clear outdated values\n            // This ensures all time slots get updated properly\n            if (this.radarData.length > 0) {\n                const lastItem = this.radarData[this.radarData.length - 1];\n                const lastTime = new Date(lastItem.timestamp);\n                const nextTime = new Date(lastTime.getTime() + 5 * 60 * 1000); // +5 minutes\n\n                this.radarData.push({\n                    timestamp: nextTime.toISOString(),\n                    source: lastItem.source,\n                    precipitation_5: -1, // Placeholder value\n                    precipitation_5_min: -1,\n                    precipitation_5_max: -1,\n                    precipitation_5_median: -1,\n                    forecast_time: lastItem.forecast_time,\n                });\n            }\n\n            // Write rotated data\n            await this.writeRadarData();\n\n            // Schedule next rotation\n            if (this.radarData.length > 0) {\n                this.radarRotationTimeout = this.setTimeout(\n                    () => {\n                        void rotateRadarData();\n                    },\n                    5 * 60 * 1000,\n                ); // 5 minutes\n            }\n        };\n\n        // Schedule first rotation in 5 minutes\n        this.radarRotationTimeout = this.setTimeout(\n            () => {\n                void rotateRadarData();\n            },\n            5 * 60 * 1000,\n        );\n    }\n\n    /**\n     * Writes radar data to ioBroker states\n     * Creates detailed time-based states if createRadarData is enabled\n     */\n    private async writeRadarData(): Promise<void> {\n        // Only write detailed radar data if createRadarData is enabled\n        if (this.config.createRadarData) {\n            // Create folders named 0, 5, 10, 15, etc. for each 5-minute interval\n            const dataToWrite: any[] = [];\n\n            for (let i = 0; i < this.radarData.length; i++) {\n                const item = this.radarData[i];\n                const minutesOffset = i * 5;\n\n                dataToWrite.push({\n                    _index: minutesOffset,\n                    ...item,\n                });\n            }\n\n            if (dataToWrite.length > 0) {\n                await this.library.writeFromJson(\n                    'radar.data.r',\n                    'weather.radar',\n                    genericStateObjects,\n                    dataToWrite,\n                    true,\n                );\n            }\n        }\n\n        // Calculate and write max precipitation forecasts\n        await this.writeMaxPrecipitationForecasts();\n    }\n\n    /**\n     * Calculates and writes maximum precipitation forecasts for various time intervals\n     * Analyzes radar data to determine max precipitation in 5, 10, 15, 30, 45, 60, and 90 minute windows\n     */\n    private async writeMaxPrecipitationForecasts(): Promise<void> {\n        const intervals = [5, 10, 15, 30, 45, 60, 90]; // minutes\n        const forecasts: { [key: string]: number } = {};\n\n        for (const interval of intervals) {\n            const numIntervals = Math.ceil(interval / 5); // How many 5-minute intervals to check\n            let maxPrecipitation = -1;\n\n            if (this.radarData.length > 0) {\n                // Get max from the next N intervals (starting from index 0 which is \"now\")\n                for (let i = 0; i < numIntervals && i < this.radarData.length; i++) {\n                    const item = this.radarData[i];\n                    if (item.precipitation_5_max !== undefined && item.precipitation_5_max > maxPrecipitation) {\n                        maxPrecipitation = item.precipitation_5_max;\n                    }\n                }\n            }\n\n            forecasts[`next_${interval}min`] = maxPrecipitation;\n        }\n\n        // Write forecasts to states\n        for (const [key, value] of Object.entries(forecasts)) {\n            await this.library.writedp(\n                `radar.max_precipitation_forecast.${key}`,\n                value,\n                genericStateObjects.max_precipitation_forecast[\n                    key as keyof typeof genericStateObjects.max_precipitation_forecast\n                ],\n            );\n        }\n    }\n\n    /**\n     * Converts wind direction in degrees to compass direction text\n     * @param windBearing Wind direction in degrees (0-360)\n     * @returns Compass direction abbreviation (e.g., \"N\", \"NNE\", \"NE\")\n     */\n    private getWindBearingText(windBearing: number | undefined): string {\n        if (windBearing === undefined) {\n            return '';\n        }\n        const directions = [\n            'N',\n            'NNE',\n            'NE',\n            'ENE',\n            'E',\n            'ESE',\n            'SE',\n            'SSE',\n            'S',\n            'SSW',\n            'SW',\n            'WSW',\n            'W',\n            'WNW',\n            'NW',\n            'NNW',\n        ];\n        const index = Math.round((windBearing % 360) / 22.5) % 16;\n        return this.library.getTranslation(directions[index]);\n    }\n\n    /**\n     * Called when adapter shuts down - cleanup timers and connections\n     * @param callback Callback to invoke after cleanup\n     */\n    private onUnload(callback: () => void): void {\n        this.unload = true;\n\n        try {\n            for (const timeout of this.weatherTimeout) {\n                if (timeout) {\n                    this.clearTimeout(timeout);\n                }\n            }\n            if (this.radarRotationTimeout) {\n                this.clearTimeout(this.radarRotationTimeout);\n            }\n            if (this.timeoutId) {\n                this.clearTimeout(this.timeoutId);\n            }\n            if (this.controller) {\n                this.controller.abort();\n                this.controller = null;\n            }\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    /**\n     * Pick best fitting weather icon (MDI day variant only) for one aggregated daily bucket.\n     * Works directly on hourly values (conditions, wind, precipitation, etc.).\n     *\n     * @param bucket Aggregated hourly data for one day\n     * @param bucket.condition Hourly condition values\n     * @param bucket.wind_speed Hourly wind speed values\n     * @param bucket.cloud_cover Hourly cloud cover values\n     * @param bucket.day If false, night icons will be used; defaults to true\n     * @returns Weather icon string (MDI icon name, day variant only)\n     */\n    pickDailyWeatherIcon(bucket: {\n        condition: (string | null | undefined)[];\n        wind_speed: (number | null | undefined)[];\n        cloud_cover?: (number | null | undefined)[];\n        day?: boolean;\n    }): { mdi: string; url: string } {\n        // --- Konstanten (zentral konfigurierbar) ---\n        const T = {\n            wind: {\n                dangerous: 118.8, // km/h Orkan\n                strong: 61.2, // km/h Sturm\n                breezy: 35, // km/h b\u00F6ig\n            },\n            rain: {\n                heavy: 0.5, // Anteil f\u00FCr heavy rain\n                light: 0.2, // Anteil f\u00FCr light rain\n                possibleMin: 0.1, // Anteil f\u00FCr possible rain\n                possibleMax: 0.35,\n                minCount: 2, // min. Stunden f\u00FCr rain relevant\n            },\n            drizzle: {\n                minCount: 2,\n                possibleMin: 0.1,\n                possibleMax: 0.35,\n            },\n            snow: {\n                heavy: 0.3,\n                possibleMin: 0.1,\n                possibleMax: 0.35,\n                minCount: 2,\n            },\n            sleet: {\n                heavy: 0.3,\n                possibleMin: 0.1,\n                possibleMax: 0.35,\n                minCount: 2,\n            },\n            hail: {\n                possibleMin: 0.01,\n                possibleMax: 0.35,\n                minCount: 1,\n            },\n            fog: {\n                present: 0.2,\n                possibleMin: 0.1,\n                possibleMax: 0.35,\n                minCount: 4,\n            },\n            smoke: {\n                present: 0.2,\n                possibleMin: 0.1,\n                possibleMax: 0.35,\n                minCount: 3,\n            },\n            thunder: {\n                partly: 0.1,\n                solid: 0.35,\n            },\n            clouds: {\n                cloudy: 70,\n                partly: 30,\n            },\n            bucket: {\n                minHours: 1,\n                defaultHours: 24,\n            },\n            defaults: {\n                iceDay: 'clear-day',\n                iceNight: 'clear-night',\n            },\n        } as const;\n\n        // --- Helpers ---\n        /*const avg = (arr: (number | null | undefined)[]): number => {\n            const xs = arr.filter((v): v is number => v != null);\n            return xs.length ? xs.reduce((a, b) => a + b, 0) / xs.length : 0;\n        };*/\n        const median = (arr: (number | null | undefined)[]): number => {\n            const xs = arr.filter((v): v is number => v != null).sort((a, b) => a - b);\n            if (!xs.length) {\n                return 0;\n            }\n            const mid = Math.floor(xs.length / 2);\n            return xs.length % 2 === 0 ? (xs[mid - 1] + xs[mid]) / 2 : xs[mid];\n        };\n        const maxN = (arr: (number | null | undefined)[]): number => {\n            const xs = arr.filter((v): v is number => v != null);\n            return xs.length ? Math.max(...xs) : 0;\n        };\n        const count = (arr: (string | null | undefined)[], labels: string[]): number =>\n            arr.filter(v => v != null && labels.includes(v)).length;\n        // Typ-spezifische possible-Range-Checks\n        const inPossibleRange = (frac: number, min: number, max: number): boolean => frac >= min && frac < max;\n\n        // --- Basiswerte aus dem Bucket ---\n        const isDay = bucket.day !== false;\n        const hours = Math.max(T.bucket.minHours, bucket.condition.length || T.bucket.defaultHours);\n        const medianClouds = bucket.cloud_cover ? median(bucket.cloud_cover) : 0;\n        const maxWind = maxN(bucket.wind_speed);\n\n        const thunderCount = count(bucket.condition, ['thunderstorm']);\n        const hailCount = count(bucket.condition, ['hail']);\n        const snowCount = count(bucket.condition, ['snow']);\n        const sleetCount = count(bucket.condition, ['sleet']);\n        const drizzleCount = count(bucket.condition, ['drizzle']);\n        const rainCount = count(bucket.condition, ['rain']);\n        const fogCount = count(bucket.condition, ['fog', 'mist', 'haze']);\n        const smokeCount = count(bucket.condition, ['smoke']);\n\n        const rainFrac = (rainCount + drizzleCount) / hours;\n        const snowFrac = snowCount / hours;\n        const sleetFrac = sleetCount / hours;\n        const thunderFrac = thunderCount / hours;\n        const hailFrac = hailCount / hours;\n        const fogFrac = fogCount / hours;\n        const smokeFrac = smokeCount / hours;\n\n        // --- Flags (Thunderstorm separat behandeln) ---\n        const hasDangerousWind = maxWind >= T.wind.dangerous;\n        const hasStrongWind = maxWind >= T.wind.strong;\n        const hasBreezyWind = maxWind >= T.wind.breezy;\n\n        const hasThunderSolid = thunderFrac >= T.thunder.solid;\n        const hasThunderPartly = !hasThunderSolid && thunderFrac >= T.thunder.partly;\n\n        const hasHeavyRain = rainFrac >= T.rain.heavy;\n        const hasLightRain = !hasHeavyRain && rainFrac >= T.rain.light;\n        const hasHeavySnow = snowFrac >= T.snow.heavy;\n        const hasSleet = sleetCount >= T.sleet.minCount;\n        const hasHail = hailCount >= T.hail.minCount;\n        const hasFogPresent = fogFrac >= T.fog.present;\n        const hasSmokePresent = smokeFrac >= T.smoke.present;\n\n        // --- MDI Auswahl ---\n        const selectMdi = (): string => {\n            if (hasDangerousWind) {\n                return 'weather-tornado';\n            }\n            if (hasThunderSolid) {\n                return 'weather-lightning';\n            }\n            if (hasThunderPartly) {\n                return 'weather-partly-lightning';\n            }\n            if (hasHail) {\n                return 'weather-hail';\n            }\n            if (hasHeavySnow) {\n                return 'weather-snowy-heavy';\n            }\n            if (hasSleet) {\n                return 'weather-snowy-rainy';\n            }\n            if (hasHeavyRain) {\n                return 'weather-pouring';\n            }\n            if (hasStrongWind) {\n                return 'weather-windy';\n            }\n\n            if (hasFogPresent || hasSmokePresent) {\n                return 'weather-fog';\n            }\n            if (hasLightRain) {\n                return 'weather-rainy';\n            }\n            if (medianClouds > T.clouds.cloudy) {\n                return 'weather-cloudy';\n            }\n            if (medianClouds > T.clouds.partly) {\n                return isDay ? 'weather-partly-cloudy' : 'weather-night-partly-cloudy';\n            }\n            if (!isDay) {\n                return 'weather-night';\n            }\n\n            return 'weather-sunny';\n        };\n\n        // --- Icebear Auswahl ---\n        const selectIcebear = (): string => {\n            const daySuffix = isDay ? 'day' : 'night';\n            if (hasDangerousWind) {\n                return 'dangerous-wind';\n            }\n\n            // Thunderstorm ist speziell: kein \"possible\"-Handling hier\n            if (hasThunderSolid || hasThunderPartly) {\n                return 'thunderstorm';\n            }\n\n            // Hail\n            if (hailCount >= T.hail.minCount) {\n                if (inPossibleRange(hailFrac, T.hail.possibleMin, T.hail.possibleMax)) {\n                    return `possible-hail-${daySuffix}`;\n                }\n                return 'hail';\n            }\n\n            // Snow\n            if (snowCount >= T.snow.minCount) {\n                if (snowFrac >= T.snow.heavy) {\n                    return 'snow';\n                }\n            }\n\n            // Sleet\n            if (sleetCount >= T.sleet.minCount) {\n                if (sleetFrac >= T.sleet.heavy) {\n                    return 'sleet';\n                }\n            }\n\n            // Rain\n            if (rainCount >= T.rain.minCount) {\n                if (rainFrac >= T.rain.heavy) {\n                    return 'rain';\n                }\n            }\n\n            if (hasStrongWind) {\n                return 'wind';\n            }\n            if (snowCount >= T.snow.minCount) {\n                if (inPossibleRange(snowFrac, T.snow.possibleMin, T.snow.possibleMax)) {\n                    return `possible-snow-${daySuffix}`;\n                }\n            }\n\n            // Sleet\n            if (sleetCount >= T.sleet.minCount) {\n                if (inPossibleRange(sleetFrac, T.sleet.possibleMin, T.sleet.possibleMax)) {\n                    return `possible-sleet-${daySuffix}`;\n                }\n            }\n            if (rainCount >= T.rain.minCount) {\n                if (inPossibleRange(rainFrac, T.rain.possibleMin, T.rain.possibleMax)) {\n                    return `possible-rain-${daySuffix}`;\n                }\n            }\n\n            // Drizzle\n            if (drizzleCount >= T.drizzle.minCount) {\n                return 'drizzle';\n            }\n\n            // Fog\n            if (fogCount >= T.fog.minCount) {\n                if (fogFrac >= T.fog.present) {\n                    return 'fog';\n                }\n                if (inPossibleRange(fogFrac, T.fog.possibleMin, T.fog.possibleMax)) {\n                    return `possible-fog-${daySuffix}`;\n                }\n            }\n\n            // Smoke\n            if (smokeCount >= T.smoke.minCount) {\n                if (smokeFrac >= T.smoke.present) {\n                    return 'smoke';\n                }\n                if (inPossibleRange(smokeFrac, T.smoke.possibleMin, T.smoke.possibleMax)) {\n                    return `possible-smoke-${daySuffix}`;\n                }\n            }\n\n            if (medianClouds > T.clouds.cloudy) {\n                return 'cloudy';\n            }\n            if (medianClouds > T.clouds.partly) {\n                return `partly-cloudy-${daySuffix}`;\n            }\n\n            if (hasBreezyWind) {\n                return 'breezy';\n            }\n            return isDay ? T.defaults.iceDay : T.defaults.iceNight;\n        };\n\n        const mdi = selectMdi();\n        const iceFile = selectIcebear();\n        const icebear = `/adapter/${this.name}/icons/icebear/${iceFile}.svg`;\n        return { mdi, url: icebear };\n    }\n\n    /**\n     * Pick best fitting weather icon for a single hour, honoring day/night, for both MDI and Icebear.\n     * Inputs are single values (not arrays) from one hourly datapoint.\n     *\n     * @param hour Inputs for one hour\n     * @param hour.condition Condition string (e.g. rain, snow, fog, thunderstorm, ...)\n     * @param hour.wind_speed Wind speed in km/h\n     * @param hour.cloud_cover Cloud cover in %\n     * @param hour.precipitation_probability Probability of precipitation in % (0..100)\n     * @param hour.day Whether it is day (true) or night (false); default true\n     */\n    pickHourlyWeatherIcon(hour: {\n        condition?: string | null;\n        wind_speed?: number | null;\n        cloud_cover?: number | null;\n        precipitation_probability?: number | null; // percent 0..100\n        day?: boolean;\n    }): { mdi: string; url: string } {\n        const T = {\n            wind: { dangerous: 118.8, strong: 61.2, breezy: 35 }, // km/h\n            clouds: { cloudy: 80, partly: 40 }, // %\n            precip: {\n                // possible rain via probability window (if no solid precip condition)\n                possibleMinPct: 20,\n                possibleMaxPct: 60,\n            },\n        } as const;\n\n        const isDay = hour.day !== false;\n        const cond = hour.condition ?? '';\n        const wind = hour.wind_speed ?? 0;\n        const clouds = hour.cloud_cover ?? 0;\n        const prob = hour.precipitation_probability ?? null; // 0..100\n\n        const hasDangerousWind = wind >= T.wind.dangerous;\n        const hasStrongWind = wind >= T.wind.strong;\n        const hasBreezyWind = wind >= T.wind.breezy;\n\n        const isThunder = cond === 'thunderstorm';\n        const isHail = cond === 'hail';\n        const isSnow = cond === 'snow';\n        const isSleet = cond === 'sleet';\n        const isDrizzle = cond === 'drizzle';\n        const isRain = cond === 'rain';\n        const isFogLike = cond === 'fog' || cond === 'mist' || cond === 'haze';\n        const isSmoke = cond === 'smoke';\n\n        const selectMdi = (): string => {\n            if (hasDangerousWind) {\n                return 'weather-tornado';\n            }\n            if (isThunder) {\n                return 'weather-lightning';\n            }\n            if (isHail) {\n                return 'weather-hail';\n            }\n            if (isSnow) {\n                return 'weather-snowy-heavy';\n            }\n            if (isSleet) {\n                return 'weather-snowy-rainy';\n            }\n            if (isRain) {\n                return 'weather-pouring';\n            }\n            if (isDrizzle) {\n                return 'weather-rainy';\n            }\n            if (isFogLike || isSmoke) {\n                return 'weather-fog';\n            }\n            if (hasStrongWind) {\n                return 'weather-windy';\n            }\n            if (clouds > T.clouds.cloudy) {\n                return 'weather-cloudy';\n            }\n            if (clouds > T.clouds.partly) {\n                return isDay ? 'weather-partly-cloudy' : 'weather-night-partly-cloudy';\n            }\n\n            if (!isDay) {\n                return 'weather-night';\n            }\n            return 'weather-sunny';\n        };\n\n        const selectIcebear = (): string => {\n            const daySuffix = isDay ? 'day' : 'night';\n            if (hasDangerousWind) {\n                return 'dangerous-wind';\n            }\n            if (isThunder) {\n                return 'thunderstorm';\n            }\n            if (isHail) {\n                return 'hail';\n            }\n            if (isSnow) {\n                return 'snow';\n            }\n            if (isSleet) {\n                return 'sleet';\n            }\n\n            // possible rain via probability window when no solid precip condition\n            if (!cond && prob != null && prob >= T.precip.possibleMinPct && prob < T.precip.possibleMaxPct) {\n                return `possible-rain-${daySuffix}`;\n            }\n\n            if (isFogLike) {\n                return 'fog';\n            }\n            if (isSmoke) {\n                return 'smoke';\n            }\n            if (isRain) {\n                return 'rain';\n            }\n            if (isDrizzle) {\n                return 'drizzle';\n            }\n\n            if (hasStrongWind) {\n                return 'wind';\n            }\n            if (clouds > T.clouds.cloudy) {\n                return 'cloudy';\n            }\n\n            if (hasBreezyWind) {\n                return 'breezy';\n            }\n            if (clouds > T.clouds.partly) {\n                return `partly-cloudy-${daySuffix}`;\n            }\n            return isDay ? 'clear-day' : 'clear-night';\n        };\n\n        const mdi = selectMdi();\n        const iceFile = selectIcebear();\n        const icebear = `/adapter/${this.name}/icons/icebear/${iceFile}.svg`;\n        return { mdi, url: icebear };\n    }\n\n    /**\n     * Calculate day and night aggregated data from hourly data based on sunrise/sunset times\n     *\n     * @param dayWeatherArr Hourly weather data for one day\n     * @param sunrise Sunrise time\n     * @param sunset Sunset time\n     * @returns Object containing aggregated day and night data\n     */\n    private calculateDayNightData(\n        dayWeatherArr: Record<string, (string | number | null)[]>,\n        sunrise: Date,\n        sunset: Date,\n    ): { dayData: Partial<BrightskyDayNightData>; nightData: Partial<BrightskyDayNightData> } {\n        const dayValues: Record<string, (string | number | null)[]> & { day?: boolean } = {};\n        const nightValues: Record<string, (string | number | null)[]> & { day?: boolean } = {};\n\n        dayValues.day = true;\n        nightValues.day = false;\n\n        // Initialize arrays for each weather parameter\n        for (const key of Object.keys(dayWeatherArr)) {\n            dayValues[key] = [];\n            nightValues[key] = [];\n        }\n\n        // Separate hourly data into day and night based on sunrise/sunset\n        const timestamps = dayWeatherArr.timestamp as string[];\n        for (let i = 0; i < timestamps.length; i++) {\n            if (!timestamps[i]) {\n                continue;\n            }\n\n            const hourTime = new Date(timestamps[i]);\n            const isDayTime = hourTime >= sunrise && hourTime <= sunset;\n\n            for (const key of Object.keys(dayWeatherArr)) {\n                const value = dayWeatherArr[key][i];\n                if (isDayTime) {\n                    dayValues[key].push(value);\n                } else {\n                    nightValues[key].push(value);\n                }\n            }\n        }\n\n        // Process day data\n        const dayData = this.processAggregatedWeatherData(dayValues);\n\n        // Process night data\n        const nightData = this.processAggregatedWeatherData(nightValues);\n\n        return { dayData, nightData };\n    }\n\n    /**\n     * Process aggregated weather data (common logic for both day and night)\n     *\n     * @param weatherValues Weather data arrays\n     * @returns Processed weather data\n     */\n    private processAggregatedWeatherData(\n        weatherValues: Record<string, (string | number | null)[]> & { day?: boolean },\n    ): Partial<BrightskyDayNightData> {\n        const result: Partial<BrightskyDayNightData> = {};\n\n        for (const key of Object.keys(weatherValues)) {\n            const k = key as keyof BrightskyWeather;\n\n            switch (k) {\n                case 'precipitation':\n                case 'wind_gust_speed':\n                case 'precipitation_probability':\n                case 'precipitation_probability_6h':\n                case 'wind_speed': {\n                    const values = weatherValues[k] as (number | null)[];\n                    if (values && values.length > 0) {\n                        for (let j = 0; j < values.length; j++) {\n                            if (values[j] === null) {\n                                values[j] = 0; // Set null values to 0\n                            }\n                        }\n                    }\n                }\n            }\n\n            switch (k) {\n                case 'timestamp': {\n                    result.timestamp = weatherValues.timestamp[0] as string;\n                    break;\n                }\n                case 'source_id': {\n                    result.source_id = weatherValues.source_id[0] as number;\n                    break;\n                }\n                case 'precipitation':\n                case 'wind_speed':\n                case 'solar':\n                case 'temperature': {\n                    const values = weatherValues[k] as (number | null)[];\n                    if (values && values.length > 0) {\n                        const min = Math.min(...(values.filter(v => v !== null) as number[]));\n                        const max = Math.max(...(values.filter(v => v !== null) as number[]));\n\n                        if (k !== 'solar') {\n                            (result as any)[`${k}_min`] = min !== Infinity ? min : null;\n                        }\n                        (result as any)[`${k}_max`] = max !== -Infinity ? max : null;\n                    } else {\n                        if (k !== 'solar') {\n                            (result as any)[`${k}_min`] = null;\n                        }\n                        (result as any)[`${k}_max`] = null;\n                    }\n                }\n                // eslint-disable-next-line no-fallthrough\n                case 'sunshine': {\n                    if (k === 'precipitation' || k === 'sunshine' || k === 'solar') {\n                        const t = weatherValues[k].reduce((sum, value) => {\n                            if (typeof sum !== 'number') {\n                                sum = 0; // Initialize sum to 0 if it's not a number\n                            }\n                            if (value != null && typeof value === 'number') {\n                                return sum + value;\n                            }\n                            return sum;\n                        }, 0);\n                        result[k] = null;\n                        if (t !== null && typeof t === 'number') {\n                            result[k] = k !== 'solar' ? Math.round(t * 10) / 10 : Math.round(t * 1000) / 1000;\n                        }\n                        break;\n                    }\n                }\n                // eslint-disable-next-line no-fallthrough\n                case 'wind_direction':\n                case 'cloud_cover':\n                case 'dew_point':\n                case 'relative_humidity':\n                case 'visibility':\n                case 'wind_gust_direction':\n                case 'wind_gust_speed':\n                case 'precipitation_probability':\n                case 'precipitation_probability_6h': {\n                    const values = weatherValues[k] as (number | null)[];\n                    if (values && values.length > 0) {\n                        let median: number | null = null;\n                        if (values.filter(v => v !== null).length > 0) {\n                            const sortedValues = values\n                                .filter(v => v !== null)\n                                .sort((a, b) => (a as number) - (b as number));\n                            const mid = Math.floor(sortedValues.length / 2);\n                            if (sortedValues.length % 2 === 0) {\n                                median = ((sortedValues[mid - 1] as number) + (sortedValues[mid] as number)) / 2;\n                            } else {\n                                median = sortedValues[mid] as number;\n                            }\n                        }\n                        let avg = values.reduce((sum, value) => {\n                            if (value != null) {\n                                return sum == null ? 0 + (value as number) : (sum as number) + (value as number);\n                            }\n                            return sum;\n                        }, 0);\n                        if (avg != null) {\n                            if (values.filter(v => v !== null).length > 2) {\n                                avg = Math.round(((avg as number) / values.filter(v => v !== null).length) * 10) / 10;\n                            } else {\n                                avg = null;\n                            }\n                        }\n                        (result as any)[`${k}_median`] = median;\n                        result[k] = avg as number;\n                    } else {\n                        result[k] = null;\n                        (result as any)[`${k}_median`] = null;\n                    }\n                    break;\n                }\n                case 'icon':\n                case 'condition': {\n                    const tempArr: { value: string | number; count: number }[] = [];\n                    for (const value of weatherValues[k]) {\n                        if (value) {\n                            const index = tempArr.findIndex(el => el.value === value);\n                            if (index !== -1) {\n                                tempArr[index].count++;\n                            } else {\n                                tempArr.push({ value, count: 1 });\n                            }\n                        }\n                    }\n                    tempArr.sort((a, b) => b.count - a.count);\n                    if (tempArr.length > 0) {\n                        if (k === 'icon') {\n                            if (weatherValues.day !== false) {\n                                tempArr[0].value = (tempArr[0].value as string).replace('-night', '-day');\n                            }\n                        }\n                        result[k] = tempArr[0].value as string;\n                    } else {\n                        result[k] = null;\n                    }\n                    const iconsAgg = this.pickDailyWeatherIcon({\n                        condition: weatherValues.condition as (string | null | undefined)[],\n                        wind_speed: weatherValues.wind_speed as (number | null | undefined)[],\n                        cloud_cover: weatherValues.cloud_cover as (number | null | undefined)[],\n                        day: weatherValues.day,\n                    });\n                    result.icon_special = iconsAgg.mdi;\n                    result.iconUrl = iconsAgg.url;\n                    break;\n                }\n                case 'pressure_msl': {\n                    const values = weatherValues[k] as (number | null)[];\n                    if (values && values.length > 0) {\n                        let median: number | null = null;\n                        if (values.filter(v => v !== null).length > 0) {\n                            const sortedValues = values\n                                .filter(v => v !== null)\n                                .sort((a, b) => (a as number) - (b as number));\n                            const mid = Math.floor(sortedValues.length / 2);\n                            if (sortedValues.length % 2 === 0) {\n                                median = ((sortedValues[mid - 1] as number) + (sortedValues[mid] as number)) / 2;\n                            } else {\n                                median = sortedValues[mid] as number;\n                            }\n                        }\n                        let avg = values.reduce((sum, value) => {\n                            if (value != null) {\n                                return sum == null ? 0 + (value as number) : (sum as number) + (value as number);\n                            }\n                            return sum;\n                        }, 0);\n                        if (avg != null && values.filter(v => v !== null).length > 2) {\n                            avg = Math.round(((avg as number) / values.filter(v => v !== null).length) * 10) / 10;\n                        } else {\n                            avg = null;\n                        }\n                        (result as any)[`${k}_median`] = median;\n                        result[k] = avg as number;\n                    } else {\n                        result[k] = null;\n                        (result as any)[`${k}_median`] = null;\n                    }\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Estimates generated electrical energy (Wh) for the upcoming hour\n     * Samples four 15-minute intervals to calculate average hourly production\n     * \n     * @param valueWhPerM2 GHI for the hour (Wh/m\u00B2) on horizontal plane\n     * @param time Timestamp for this hour (Date | number | string)\n     * @param coords Coordinates { lat, lon }\n     * @param panels Array of panels (azimuth, tilt, area, efficiency in %)\n     * @returns Wh (electrical) for all panels combined\n     */\n    estimatePVEnergyForHour(\n        valueWhPerM2: number,\n        time: Date | number | string,\n        coords: Coords,\n        panels: Panel[],\n    ): number {\n        let quarterHoursValueSum = 0;\n        for (let i = 0; i < 4; i++) {\n            const quarterHourTime =\n                time instanceof Date\n                    ? new Date(time.getTime() + i * 15 * 60000)\n                    : typeof time === 'number'\n                      ? new Date(time + i * 15 * 60000)\n                      : new Date(new Date(time).getTime() + i * 15 * 60000);\n            quarterHoursValueSum += this.estimatePvEnergy(valueWhPerM2, quarterHourTime, coords, panels, this.wrArray);\n        }\n        return quarterHoursValueSum / 4;\n    }\n    \n    /**\n     * Calculates photovoltaic energy production for a specific time\n     * Uses sun position, panel orientation, and inverter limits to estimate output\n     * \n     * @param valueWhPerM2 Global Horizontal Irradiance (Wh/m\u00B2)\n     * @param time Timestamp for calculation\n     * @param coords Geographic coordinates { lat, lon }\n     * @param panels Array of solar panel configurations\n     * @param wrArray Array of inverter power limits (Wh)\n     * @returns Estimated electrical energy production (Wh)\n     */\n    estimatePvEnergy(\n        valueWhPerM2: number,\n        time: Date | number | string,\n        coords: Coords,\n        panels: Panel[],\n        wrArray: number[],\n    ): number {\n        // ===== Helpers (funktion-lokal) =====\n        const toRad = (d: number): number => (d * Math.PI) / 180;\n        const clamp01 = (x: number): number => Math.min(1, Math.max(0, x));\n        const normEff = (pct: number): number => clamp01(pct / 100); // 0..100% \u2192 0..1\n\n        // Konstanten (einfaches, robustes Modell)\n        const ALBEDO = 0.2; // Bodenreflexionsfaktor\n\n        // Sonnenstand holen\n        const date = time instanceof Date ? time : new Date(time);\n        const pos = suncalc.getPosition(date, coords.lat, coords.lon);\n        const sunEl = pos.altitude; // Elevation in rad\n        // SunCalc-Azimut: 0 = S\u00FCd, +West; auf 0=N, 90=E normieren:\n        const sunAzDeg = ((pos.azimuth * 180) / Math.PI + 180 + 360) % 360;\n        const sunAz = toRad(sunAzDeg);\n\n        if (sunEl <= 0 || valueWhPerM2 <= 0 || panels.length === 0) {\n            return 0;\n        }\n\n        // Grobe Aufteilung in Direkt/Diffus aus Elevation (ohne externe Daten):\n        const beamFraction = clamp01(Math.sin(sunEl) * 1.1);\n        const diffuseFraction = 1 - beamFraction;\n\n        let totalWh = 0;\n        for (let w = 0; w < wrArray.length; w++) {\n            const maxPower = wrArray[w];\n            let totalGroupPower = 0;\n\n            for (const p of this.groupArray[w]) {\n                p.wr = p.wr ?? 0;\n                if (p.wr !== w) {\n                    continue;\n                }\n                const eff = normEff(p.efficiency);\n                if (eff <= 0 || p.area <= 0) {\n                    continue;\n                }\n\n                const tilt = toRad(p.tilt);\n                const az = toRad(((p.azimuth % 360) + 360) % 360);\n\n                // Modulnormalen-Vektor\n                const nx = Math.sin(tilt) * Math.sin(az);\n                const ny = Math.sin(tilt) * Math.cos(az);\n                const nz = Math.cos(tilt);\n\n                // Sonnenvektor\n                const sx = Math.cos(sunEl) * Math.sin(sunAz);\n                const sy = Math.cos(sunEl) * Math.cos(sunAz);\n                const sz = Math.sin(sunEl);\n\n                // Einfallswinkel\n                const cosTheta = Math.max(0, nx * sx + ny * sy + nz * sz);\n\n                // Direktanteil von horizontal \u2192 Modulfl\u00E4che\n                const dirGain = cosTheta / Math.max(1e-6, Math.sin(sunEl));\n\n                // Diffus isotrop + Bodenreflexion\n                const skyDiffuseGain = (1 + Math.cos(tilt)) / 2;\n                const groundRefGain = (ALBEDO * (1 - Math.cos(tilt))) / 2;\n\n                // POA-Energie (Wh/m\u00B2) auf dem Modul f\u00FCr die Stunde\n                const poaWhPerM2 =\n                    valueWhPerM2 * (beamFraction * dirGain + diffuseFraction * skyDiffuseGain + groundRefGain);\n\n                // Elektrische Energie\n                const elecWh = Math.max(0, poaWhPerM2) * p.area * eff;\n                totalGroupPower += elecWh; // max. Wechselrichter-Leistung beachten\n            }\n            totalWh += maxPower > 0 ? Math.min(maxPower, totalGroupPower) : totalGroupPower;\n        }\n\n        return totalWh;\n    }\n\n    /**\n     * Wrapper for fetch with automatic 30-second timeout and abort controller\n     * Ensures API requests don't hang indefinitely\n     * \n     * @param url URL to fetch\n     * @param init Optional fetch initialization options\n     * @returns Promise resolving to Response object\n     * @throws Error if request fails or times out\n     */\n    async fetch(url: string, init?: RequestInit): Promise<Response> {\n        this.controller = new AbortController();\n        const currentController = this.controller;\n        this.timeoutId = this.setTimeout(() => {\n            if (this.controller === currentController && this.controller) {\n                this.controller.abort();\n                this.controller = null;\n            }\n        }, 30000); // 30 seconds timeout\n\n        try {\n            const response = await fetch(url, {\n                ...init,\n                method: init?.method ?? 'GET',\n                signal: this.controller.signal,\n            });\n\n            // Clear the timeout since the request completed\n            this.clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n            this.controller = null;\n            return response;\n        } catch (error) {\n            this.clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n            this.controller = null;\n            throw error;\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Brightsky(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Brightsky())();\n}\n"],
  "mappings": "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",
  "names": []
}
